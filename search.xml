<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Is a default constructor always provided by the Java compiler?</title>
    <url>/2021/12/30/Is-a-default-constructor-always-provided-by-the-Java-compiler/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The Java compiler does not always provide a default constructor. It only provides a default constructor when the programmer does not provide any constructor in the class. This blog will first introduce the different types of constructors and then prove that the compiler does not always provide a default constructor.</p>
<span id="more"></span>

<h2 id="1-Types-of-Constructors"><a href="#1-Types-of-Constructors" class="headerlink" title="1. Types of Constructors"></a>1. Types of Constructors</h2><p>Generally speaking, there are three types of constructors: <strong>the default constructor, no-parameter constructor, and constructor with parameters</strong>.</p>
<p><strong>Default constructor</strong>: A constructor without parameters, which is created by the Java compiler during the compiling phase.</p>
<p><strong>No-parameter constructor</strong>: A constructor without parameters, which is created by the programmers when they write the source code(.java file).</p>
<p><strong>Constructor with parameters</strong>: A constructor that have some parameters, which is created by the programmers when they write the source code(.java file).</p>
<h2 id="2-The-Proof-Process"><a href="#2-The-Proof-Process" class="headerlink" title="2. The Proof Process"></a>2. The Proof Process</h2><h3 id="2-1-The-process-of-compiling-and-interpreting-a-Java-program"><a href="#2-1-The-process-of-compiling-and-interpreting-a-Java-program" class="headerlink" title="2.1. The process of compiling and interpreting a Java program"></a>2.1. The process of compiling and interpreting a Java program</h3><p><img src="https://raw.githubusercontent.com/zhiyaohe/blog-images/aa853d52af96a1bad149007daee293e79f67f05f/1.The%20process%20of%20compiling%20and%20interpreting%20a%20Java%20program.png" alt="process"></p>
<center>The process of compiling and interpreting a Java program (Downey, 2019, p. 9)</center>

<p>The process of compiling and interpreting a Java source code is: first, a programmer writes a .java file; second, the compiler will compile it to a .class file; finally, the interpreter(JVM, Java Virtue Machine) will interpret it.</p>
<h3 id="2-2-The-proof-steps"><a href="#2-2-The-proof-steps" class="headerlink" title="2.2. The proof steps"></a>2.2. The proof steps</h3><p>The Java compiler would add the default constructor when compiling the .java file into the .class file. Hence, the .class file should have a constructor created by the compiler if it did provide. Therefore, we can check the .class file to see whether the compiler would give a default constructor if the programmers do not offer any constructor. For the .class file, we can use the <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">javap</a> command to disassemble it, and the outputs will show us what it includes. Simply, the process is: </p>
<center>Compiling the .java file â€“> using javap to disassemble the .class file -> ckeck the outputs</center>

<p>Next, I will use two programs to prove: a .java file without construct given by the programmer and a .java file with a constructor provided by the programmer.</p>
<h3 id="2-3-The-proof-examples"><a href="#2-3-The-proof-examples" class="headerlink" title="2.3. The proof examples"></a>2.3. The proof examples</h3><h4 id="2-3-1-Example-of-a-java-file-without-construct-given-by-the-programmer"><a href="#2-3-1-Example-of-a-java-file-without-construct-given-by-the-programmer" class="headerlink" title="2.3.1. Example of a .java file without construct given by the programmer"></a>2.3.1. Example of a .java file without construct given by the programmer</h4><p>The following <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">DocFooter.java</a> is the source code without any constructor declaring by the programmer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">Applet</span> </span>&#123;</span><br><span class="line">    String date;</span><br><span class="line">    String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        resize(<span class="number">500</span>, <span class="number">100</span>);</span><br><span class="line">        date = getParameter(<span class="string">&quot;LAST_UPDATED&quot;</span>);</span><br><span class="line">        email = getParameter(<span class="string">&quot;EMAIL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        g.drawString(date + <span class="string">&quot; by &quot;</span>, <span class="number">100</span>, <span class="number">15</span>);</span><br><span class="line">        g.drawString(email, <span class="number">290</span>, <span class="number">15</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>DocFooter.java without any constructor declaring by the programmer  (Oracle, n.d.)</center>

<p>Now, we can use the java command to compile the DocFooter.java, and the compiler will generate a .class file, like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\AI\Desktop&gt;java DocFooter.java</span><br></pre></td></tr></table></figure>

<p>After getting the .class file, we can use the <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">javac</a> command to disassemble it. And the outputs will show us what it includes:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\AI\Desktop&gt;javap DocFooter.class</span><br><span class="line">Compiled from <span class="string">&quot;DocFooter.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">applet</span>.<span class="title">Applet</span> </span>&#123;</span><br><span class="line">    java.lang.String date;</span><br><span class="line">    java.lang.String email;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DocFooter</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(java.awt.Graphics)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As we can see, there are no constructors in the DocFooter.java file, but in the disassemble outputs, there is a constructor: DocFooter(), which illustrates that the compiler would provide a default constructor if the programmer did not offer constructors to the class.</p>
<h4 id="2-3-2-Example-of-a-java-file-with-a-constructor-provided-by-the-programmer"><a href="#2-3-2-Example-of-a-java-file-with-a-constructor-provided-by-the-programmer" class="headerlink" title="2.3.2. Example of a .java file with a constructor provided by the programmer"></a>2.3.2. Example of a .java file with a constructor provided by the programmer</h4><p>Now, I will add a constructor in the above DocFooter.java to see whether the compiler will add a default constructor. The following DocFooter.java is the source code with  a  constructor declaring by the programmer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">Applet</span> </span>&#123;</span><br><span class="line">    String date;</span><br><span class="line">    String email;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// the constructor provided by the programmer</span></span><br><span class="line">    DocFooter(String date, String email) &#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        resize(<span class="number">500</span>, <span class="number">100</span>);</span><br><span class="line">        date = getParameter(<span class="string">&quot;LAST_UPDATED&quot;</span>);</span><br><span class="line">        email = getParameter(<span class="string">&quot;EMAIL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        g.drawString(date + <span class="string">&quot; by &quot;</span>, <span class="number">100</span>, <span class="number">15</span>);</span><br><span class="line">        g.drawString(email, <span class="number">290</span>, <span class="number">15</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>DocFooter.java with a constructor declaring by the programmer</center>

<p>Now, we can use the java command to compile the DocFooter.java, and the compiler will generate a .class file, like this: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\AI\Desktop&gt;java DocFooter.java</span><br></pre></td></tr></table></figure>

<p>After getting the .class file, we can use the <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">javac</a> command to disassemble it. And the outputs will show us what it includes:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\AI\Desktop&gt;javap DocFooter.class</span><br><span class="line">Compiled from <span class="string">&quot;DocFooter.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">applet</span>.<span class="title">Applet</span> </span>&#123;</span><br><span class="line">    java.lang.String date;</span><br><span class="line">    java.lang.String email;</span><br><span class="line">    DocFooter(java.lang.String, java.lang.String);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(java.awt.Graphics)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As we can see, there is no default constructor in the outputs, and it only has the constructor: DocFooter(java.lang.String, java.lang.String), which the programmer provides. Hence, the compiler does not provide a default constructor if the programmer provides constructors in the source codes.</p>
<h2 id="3-In-Conclusion"><a href="#3-In-Conclusion" class="headerlink" title="3. In Conclusion"></a>3. In Conclusion</h2><p>Based on the above examples and at a compiler level, we prove that the Java compiler does not always provide a default constructor. It only provides a default constructor when the programmer does not provide any constructor in the souce code.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>1.Downey, A.B., &amp; Mayfield, C. (2019). <em>Think Java (2nd ed.)</em>. Green Tea Press.<br><a href="https://open.umn.edu/opentextbooks/formats/331">https://open.umn.edu/opentextbooks/formats/331</a></p>
<p>2.ORACLE. (n.d.). Providing Constructors for Your Classes.<br><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html">https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html</a></p>
<p>3.ORACLE. (n.d.). javap - The Java Class File Disassembler.<br><a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>CS1102</tag>
      </tags>
  </entry>
</search>
