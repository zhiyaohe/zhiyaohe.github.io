<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Building a Personal Blog with Github and Hexo</title>
    <url>/2021/12/31/How-to-build-a-personal-blog-with-Github-and-Hexo/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This blog will introduce how to use Github and Hexo to build a personal blog. Specifically, I will first submit the basic steps to create a blog and then present how to optimize the blog.</p>
<span id="more"></span>

<h2 id="1-Build-the-Blog"><a href="#1-Build-the-Blog" class="headerlink" title="1. Build the Blog"></a>1. Build the Blog</h2><p>For the basic steps, please refer to: <a href="http://connorlin.github.io/2016/04/02/%E4%BD%BF%E7%94%A8Hexo%EF%BC%8BGithub%20Pages%20%E6%9D%A5%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/">Use Hexo + Github Pages to build a free exclusive blog</a> (ConnorLin, 2016) and <a href="https://hexo-next.readthedocs.io/zh_CN/latest/#_1">Hexo and NexT offical documentation</a> (Zhu, 2021).  </p>
<h2 id="2-Optimize-the-Blog"><a href="#2-Optimize-the-Blog" class="headerlink" title="2. Optimize the Blog"></a>2. Optimize the Blog</h2><p>To optimize the blog, please refer to: <a href="https://choubin.site/2019/12/30/CustomBlogTheme/">Optimization of personal blog based on Hexo and NexT</a> (Chou, 2019) and <a href="http://theme-next.iissnan.com/getting-started.html">Hexo Theme NexT (version5.1.4) official documentation </a> (IIssNan, n.d.).  </p>
<p>Note: It is recommended to install <a href="https://github.com/iissnan/hexo-theme-next">NexT V5.1.4</a> first because this version has many related documents for reference. The new version of NexT lacks relevant documents, so it is not easy to solve bugs once you encounter them.  </p>
<h2 id="3-FAQ"><a href="#3-FAQ" class="headerlink" title="3. FAQ"></a>3. FAQ</h2><h3 id="3-1-How-to-center-the-footer"><a href="#3-1-How-to-center-the-footer" class="headerlink" title="3.1. How to center the footer?"></a>3.1. How to center the footer?</h3><p>Open <code>themes\next\source\css\_schemes\Mist\index.styl</code>, change the <code>text-align</code> in <code>.footer-inner</code> to <code>center</code>:</p>
<figure class="highlight styl"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.footer-inner</span> {</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  +mobile() {</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-2-How-to-center-the-post-title-post-metadata-post-tags-and-the-read-more-button"><a href="#3-2-How-to-center-the-post-title-post-metadata-post-tags-and-the-read-more-button" class="headerlink" title="3.2.  How to center the post title, post metadata, post tags, and the read more button?"></a>3.2.  How to center the post title, post metadata, post tags, and the read more button?</h3><p>Open <code>\themes\next\source\css\_custom\custom.styl</code>, add the following codes into it:</p>
<figure class="highlight styl"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// read more center</span></span><br><span class="line"><span class="selector-class">.post-button</span> {</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// post-title, post-meta center</span></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title</span>, <span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// post-tags center</span></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-tags</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-3-How-to-modify-the-Read-More-button-style"><a href="#3-3-How-to-modify-the-Read-More-button-style" class="headerlink" title="3.3.  How to modify the Read More button style?"></a>3.3.  How to modify the <code>Read More</code> button style?</h3><p>Open <code>\themes\next\source\css\_custom\custom.styl</code>, add the following codes into it:</p>
<figure class="highlight styl"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// read more style</span></span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span> {</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.08</span>);</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition-property</span>: unset;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">13px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-4-How-to-fix-the-error-generated-by-clicking-the-menus-like-tags"><a href="#3-4-How-to-fix-the-error-generated-by-clicking-the-menus-like-tags" class="headerlink" title="3.4.  How to fix the error generated by clicking the menus like tags?"></a>3.4.  How to fix the error generated by clicking the menus like tags?</h3><p>When clicking menus, you may get an error:<code>Cannot GET /about/%20</code>. To slove it, you can open <code>\themes\next\_config.yml</code>, find menu settings, and delete the space between <code>/</code> and <code>||</code>:<br>Code before modification:</p>
<figure class="highlight styl"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">menu</span>:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || <span class="selector-tag">th</span></span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  <span class="selector-id">#schedule</span>: /schedule/ || calendar</span><br><span class="line">  <span class="selector-id">#sitemap</span>: /sitemap<span class="selector-class">.xml</span> || sitemap</span><br><span class="line">  <span class="selector-id">#commonweal</span>: /<span class="number">404</span>/ || heartbeat</span><br></pre></td></tr></tbody></table></figure>
<p>Code after  modification:</p>
<figure class="highlight styl"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">menu</span>:</span><br><span class="line">  home: /|| home</span><br><span class="line">  categories: /categories/|| <span class="selector-tag">th</span></span><br><span class="line">  archives: /archives/|| archive</span><br><span class="line">  tags: /tags/|| tags</span><br><span class="line">  about: /about/|| user</span><br><span class="line">  <span class="selector-id">#schedule</span>: /schedule/|| calendar</span><br><span class="line">  <span class="selector-id">#sitemap</span>: /sitemap.xml|| sitemap</span><br><span class="line">  <span class="selector-id">#commonweal</span>: /<span class="number">404</span>/|| heartbeat</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-5-How-to-fix-the-error-generated-by-clicking-the-menus-categories"><a href="#3-5-How-to-fix-the-error-generated-by-clicking-the-menus-categories" class="headerlink" title="3.5.  How to fix the error generated by clicking the menus categories?"></a>3.5.  How to fix the error generated by clicking the menus categories?</h3><p>When clicking the menu <code>categories</code>, you may  get an error:<code>Cannot GET /archives/%7C%7C%20list/</code>. To slove it, you can open <code>\themes\next\layout\_macro\sidebar.swig</code>, then, use <code>Ctrl + F</code> command, to search the codes: </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;a href="{{ url_for(theme.menu.archives).split('||')[0] | trim }}"&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>and replace them with:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;a href="{{url_for(theme.menu.archives.split('||')[0])| trim}}"&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-6-How-to-fix-the-error-generated-by-changing-the-theme-to-next"><a href="#3-6-How-to-fix-the-error-generated-by-changing-the-theme-to-next" class="headerlink" title="3.6.  How to fix the error generated by changing the theme to next?"></a>3.6.  How to fix the error generated by changing the theme to <code>next</code>?</h3><p>You may encounter an error when changing the theme to <code>next</code> in the site <code>_config.yml</code>. This is because Hexo deleted <code>swig</code> after version 5.0. We need to install it manually. Install swig by executing the following command in the root directory of the site:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">nmp i hexo-renderer-swig</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-7-How-to-fix-the-error-generated-by-clicking-the-menus-categories"><a href="#3-7-How-to-fix-the-error-generated-by-clicking-the-menus-categories" class="headerlink" title="3.7.  How to fix the error generated by clicking the menus categories?"></a>3.7.  How to fix the error generated by clicking the menus categories?</h3><p>When clicking the menu <code>categories</code>, you may  get an error:<code>Cannot GET /archives/%7C%7C%20list/</code>. To slove it, you can open <code>\themes\next\layout\_macro\sidebar.swig</code>, then, use <code>Ctrl + F</code> command, to search the codes: </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;a href="{{ url_for(theme.menu.archives).split('||')[0] | trim }}"&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>and replace them with:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;a href="{{url_for(theme.menu.archives.split('||')[0])| trim}}"&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-8-How-to-change-the-color-of-the-footer-heart"><a href="#3-8-How-to-change-the-color-of-the-footer-heart" class="headerlink" title="3.8.  How to change the color of the footer heart?"></a>3.8.  How to change the color of the footer heart?</h3><p>Open <code>\themes\next\source\css\_common\components\footer\footer.styl</code>, add <code>color: #ff0000;</code> into it <code>.with-love{}</code>:</p>
<figure class="highlight styl"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.with-love</span> {</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>1.ConnorLin. (2016). <em><a href="http://connorlin.github.io/2016/04/02/%E4%BD%BF%E7%94%A8Hexo%EF%BC%8BGithub%20Pages%20%E6%9D%A5%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/">Use Hexo + Github Pages to build a free exclusive blog</a></em>.<br>2.Chou, B. (2019). <em><a href="https://choubin.site/2019/12/30/CustomBlogTheme/">Optimization of personal blog based on Hexo and NexT</a></em>.<br>3.Zhu, J. (2021).  <em><a href="https://hexo-next.readthedocs.io/zh_CN/latest/#_1">Hexo and NexT offical documentation</a></em>.<br>4.IIssNan. (n.d.). <em><a href="https://github.com/iissnan/hexo-theme-next">Hexo Theme NexT (v5.1.4) Github repository </a></em>.<br>5.IIssNan. (n.d.). <em><a href="http://theme-next.iissnan.com/getting-started.html">Hexo Theme NexT (v5.1.4) official documentation </a></em>.<br>6.RUNOOB.COM. (n.d.).  <em><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown tutorial</a></em>.<br>7.Leafney. (2019).  <em><a href="https://www.itfanr.cc/2019/04/30/hexo-add-gitalk-comment/">Add gitalk comment system to Hexo blog</a></em>.<br>8.Leafney. (2019).  <em><a href="https://www.itfanr.cc/2018/09/17/hexo-add-gitment-review-system/">Add gitment comment system to Hexo blog</a></em>.<br>9.Leafney. (2021).  <em><a href="https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/">Encrypt Hexo blog posts</a></em>.<br>10.Xia,Z.Y. (n.d.).  <em><a href="https://github.com/D0n9X1n/hexo-blog-encrypt"> Encryption plugin Github repository: hexo-blog-encrypt</a></em>.<br>11.Fish_404. (2018).  <em><a href="https://blog.fish-404.icu/Blog-adjust-sidebar-nextmist-left/"> Move NexT Mist theme sidebar to the left</a></em>.<br>12.Garry. (2019).  <em><a href="https://blog.garryde.com/archives/50370.html"> Hexo avatar settings</a></em>.<br>13.Sun. (2018).  <em><a href="https://juejin.cn/post/6844903696455696391#heading-12">Use Hexo+NexT to create a cool blog</a></em>.  </p>
<hr>
<center>This is the ending, thanks for reading.</center>

<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Is a default constructor always provided by the Java compiler?</title>
    <url>/2021/12/30/Is-a-default-constructor-always-provided-by-the-Java-compiler/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The Java compiler does not always provide a default constructor. It only provides a default constructor when the programmer does not provide any constructor in the class. This blog will first introduce the different types of constructors and then prove that the compiler does not always provide a default constructor.</p>
<span id="more"></span>

<h2 id="1-Types-of-Constructors"><a href="#1-Types-of-Constructors" class="headerlink" title="1. Types of Constructors"></a>1. Types of Constructors</h2><p>Generally speaking, there are three types of constructors: <strong>the default constructor, no-parameter constructor, and constructor with parameters</strong>.</p>
<p><strong>Default constructor</strong>: A constructor without parameters, which is created by the Java compiler during the compiling phase.</p>
<p><strong>No-parameter constructor</strong>: A constructor without parameters, which is created by the programmers when they write the source code(.java file).</p>
<p><strong>Constructor with parameters</strong>: A constructor that have some parameters, which is created by the programmers when they write the source code(.java file).</p>
<h2 id="2-The-Proof-Process"><a href="#2-The-Proof-Process" class="headerlink" title="2. The Proof Process"></a>2. The Proof Process</h2><h3 id="2-1-The-process-of-compiling-and-interpreting-a-Java-program"><a href="#2-1-The-process-of-compiling-and-interpreting-a-Java-program" class="headerlink" title="2.1. The process of compiling and interpreting a Java program"></a>2.1. The process of compiling and interpreting a Java program</h3><p><img src="https://github.com/zhiyaohe/blog-images/blob/main/2021-12-30-Is%20a%20default%20constructor%20always%20provided%20by%20the%20Java%20compiler/1.The%20process%20of%20compiling%20and%20interpreting%20a%20Java%20program.png?raw=true" alt="process"></p>
<center>The process of compiling and interpreting a Java program (Downey, 2019, p. 9)</center>

<p>The process of compiling and interpreting a Java source code is: first, a programmer writes a .java file; second, the compiler will compile it to a .class file; finally, the interpreter(JVM, Java Virtue Machine) will interpret it.</p>
<h3 id="2-2-The-proof-steps"><a href="#2-2-The-proof-steps" class="headerlink" title="2.2. The proof steps"></a>2.2. The proof steps</h3><p>The Java compiler would add the default constructor when compiling the .java file into the .class file. Hence, the .class file should have a constructor created by the compiler if it did provide. Therefore, we can check the .class file to see whether the compiler would give a default constructor if the programmers do not offer any constructor. For the .class file, we can use the <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">javap</a> command to disassemble it, and the outputs will show us what it includes. Simply, the process is: </p>
<center>Compiling the .java file –&gt; using javap to disassemble the .class file -&gt; ckeck the outputs</center>

<p>Next, I will use two programs to prove: a .java file without construct given by the programmer and a .java file with a constructor provided by the programmer.</p>
<h3 id="2-3-The-proof-examples"><a href="#2-3-The-proof-examples" class="headerlink" title="2.3. The proof examples"></a>2.3. The proof examples</h3><h4 id="2-3-1-Example-of-a-java-file-without-constructor-given-by-the-programmer"><a href="#2-3-1-Example-of-a-java-file-without-constructor-given-by-the-programmer" class="headerlink" title="2.3.1. Example of a .java file without constructor given by the programmer"></a>2.3.1. Example of a .java file without constructor given by the programmer</h4><p>The following <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">DocFooter.java</a> is the source code without any constructor declaring by the programmer:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">Applet</span> </span>{</span><br><span class="line">    String date;</span><br><span class="line">    String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        resize(<span class="number">500</span>, <span class="number">100</span>);</span><br><span class="line">        date = getParameter(<span class="string">"LAST_UPDATED"</span>);</span><br><span class="line">        email = getParameter(<span class="string">"EMAIL"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>{</span><br><span class="line">        g.drawString(date + <span class="string">" by "</span>, <span class="number">100</span>, <span class="number">15</span>);</span><br><span class="line">        g.drawString(email, <span class="number">290</span>, <span class="number">15</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<center>DocFooter.java without any constructor declaring by the programmer  (Oracle, n.d.)</center>

<p>Now, we can use the java command to compile the DocFooter.java, and the compiler will generate a .class file, like this: </p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\AI\Desktop&gt;java DocFooter.java</span><br></pre></td></tr></tbody></table></figure>

<p>After getting the .class file, we can use the <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">javac</a> command to disassemble it. And the outputs will show us what it includes:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\AI\Desktop&gt;javap DocFooter.class</span><br><span class="line">Compiled from <span class="string">"DocFooter.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">applet</span>.<span class="title">Applet</span> </span>{</span><br><span class="line">    java.lang.String date;</span><br><span class="line">    java.lang.String email;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DocFooter</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(java.awt.Graphics)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>As we can see, there are no constructors in the DocFooter.java file, but in the disassemble outputs, there is a constructor: DocFooter(), which illustrates that the compiler would provide a default constructor if the programmer did not offer constructors to the class.</p>
<h4 id="2-3-2-Example-of-a-java-file-with-a-constructor-provided-by-the-programmer"><a href="#2-3-2-Example-of-a-java-file-with-a-constructor-provided-by-the-programmer" class="headerlink" title="2.3.2. Example of a .java file with a constructor provided by the programmer"></a>2.3.2. Example of a .java file with a constructor provided by the programmer</h4><p>Now, I will add a constructor in the above DocFooter.java to see whether the compiler will add a default constructor. The following DocFooter.java is the source code with  a  constructor declaring by the programmer:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">Applet</span> </span>{</span><br><span class="line">    String date;</span><br><span class="line">    String email;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// the constructor provided by the programmer</span></span><br><span class="line">    DocFooter(String date, String email) {</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        resize(<span class="number">500</span>, <span class="number">100</span>);</span><br><span class="line">        date = getParameter(<span class="string">"LAST_UPDATED"</span>);</span><br><span class="line">        email = getParameter(<span class="string">"EMAIL"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>{</span><br><span class="line">        g.drawString(date + <span class="string">" by "</span>, <span class="number">100</span>, <span class="number">15</span>);</span><br><span class="line">        g.drawString(email, <span class="number">290</span>, <span class="number">15</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<center>DocFooter.java with a constructor declaring by the programmer</center>

<p>Now, we can use the java command to compile the DocFooter.java, and the compiler will generate a .class file, like this: </p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\AI\Desktop&gt;java DocFooter.java</span><br></pre></td></tr></tbody></table></figure>

<p>After getting the .class file, we can use the <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">javac</a> command to disassemble it. And the outputs will show us what it includes:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\AI\Desktop&gt;javap DocFooter.class</span><br><span class="line">Compiled from <span class="string">"DocFooter.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocFooter</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">applet</span>.<span class="title">Applet</span> </span>{</span><br><span class="line">    java.lang.String date;</span><br><span class="line">    java.lang.String email;</span><br><span class="line">    DocFooter(java.lang.String, java.lang.String);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(java.awt.Graphics)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>As we can see, there is no default constructor in the outputs, and it only has the constructor: DocFooter(java.lang.String, java.lang.String), which the programmer provides. Hence, the compiler does not provide a default constructor if the programmer provides constructors in the source codes.</p>
<h2 id="3-In-Conclusion"><a href="#3-In-Conclusion" class="headerlink" title="3. In Conclusion"></a>3. In Conclusion</h2><p>Based on the above examples and at a compiler level, we prove that the Java compiler does not always provide a default constructor. It only provides a default constructor when the programmer does not provide any constructor in the souce code.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>1.Downey, A.B., &amp; Mayfield, C. (2019). <em>Think Java (2nd ed.)</em>. Green Tea Press.<br><a href="https://open.umn.edu/opentextbooks/formats/331">https://open.umn.edu/opentextbooks/formats/331</a></p>
<p>2.ORACLE. (n.d.). Providing Constructors for Your Classes.<br><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html">https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html</a></p>
<p>3.ORACLE. (n.d.). javap - The Java Class File Disassembler.<br><a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html">https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html</a>  </p>
<p>​    </p>
<hr>
<center>This is the ending, thanks for reading.</center>

<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>CS1102</tag>
      </tags>
  </entry>
</search>
